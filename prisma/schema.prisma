generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  name                String
  password            String
  role                UserRole
  phone               String?
  created_at          DateTime            @default(now())
  join_date           DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  admin               Admin?
  faculty             Faculty?
  student             Student?
  facultyProjects     InternshipProject[] @relation("FacultyProjects")
  studentApplications Application[]       @relation("StudentApplications")

  @@map("users")
}

model Admin {
  id            String   @id @default(cuid())
  department    String
  office        String
  permissions   String[]
  user_id       String   @unique
  working_hours String
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Faculty {
  id                  String             @id @default(cuid())
  department          String
  office              String
  specialization      String
  faculty_id          String             @unique
  office_hours        String
  user_id             String             @unique
  image_id            String?
  image_path          String?            @default("profile-img")
  resume_id           String?
  resume_path         String?            @default("resumes")
  attendance_records  AttendanceRecord[]
  class_schedules     ClassSchedule[]
  component_approvals ComponentRequest[] @relation("ComponentApprovals")
  component_requests  ComponentRequest[] @relation("ComponentRequests")
  user                User               @relation(fields: [user_id], references: [id], onDelete: Cascade)
  location_bookings   LocationBooking[]
  project_requests    ProjectRequest[]
  library_requests     LibraryRequest[]
  library_items       LibraryItem[]
  domain_assignments  DomainCoordinator[] @relation("DomainAssignments")
  opportunities       Opportunity[]
  platform_manager_assignments PlatformManagerAssignment[]
  developer_assignments DeveloperAssignment[]

  @@map("faculty")
}

model Student {
  id                  String              @id @default(cuid())
  program             String
  year                String
  section             String
  gpa                 Float?
  advisor_id          String?
  student_id          String              @unique
  user_id             String              @unique
  resume_id           String?
  resume_path         String?            @default("resumes")
  component_requests  ComponentRequest[]
  enrollments         Enrollment[]
  project_requests    ProjectRequest[]
  project_submissions ProjectSubmission[]
  attendance_records  StudentAttendance[]
  library_requests   LibraryRequest[]
  user                User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  opportunity_applications OpportunityApplication[]

  @@map("students")
}

model Course {
  id                 String          @id @default(cuid())
  course_description String
  course_end_date    DateTime
  course_enrollments String[]
  course_name        String
  course_start_date  DateTime
  created_by         String
  created_date       DateTime        @default(now())
  modified_by        String?
  modified_date      DateTime        @updatedAt
  course_code        String          @unique
  class_schedules    ClassSchedule[]
  course_units       CourseUnit[]
  enrollments        Enrollment[]

  @@map("courses")
}

model CourseUnit {
  id               String   @id @default(cuid())
  course_id        String
  unit_number      Int
  unit_name        String
  unit_description String
  assignment_count Int      @default(0)
  hours_per_unit   Int      @default(1)
  created_by       String
  created_date     DateTime @default(now())
  modified_by      String?
  modified_date    DateTime @updatedAt
  course           Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([course_id, unit_number])
  @@map("course_units")
}

model Enrollment {
  id          String   @id @default(cuid())
  course_id   String
  enrolled_at DateTime @default(now())
  student_id  String
  grade       String?
  course      Course   @relation(fields: [course_id], references: [id])
  student     Student  @relation(fields: [student_id], references: [id])

  @@unique([student_id, course_id])
  @@map("enrollments")
}

model ClassSchedule {
  id          String     @id @default(cuid())
  room        String
  section     String
  course_id   String
  day_of_week String
  end_time    String
  faculty_id  String?
  start_time  String
  course      Course     @relation(fields: [course_id], references: [id])
  faculty     Faculty?   @relation(fields: [faculty_id], references: [id])

  @@map("class_schedules")
}

model Project {
  id                       String              @id @default(cuid())
  accepted_by              String?
  components_needed        String[]
  course_id                String?
  created_by               String
  created_date             DateTime            @default(now())
  description              String
  expected_completion_date DateTime
  modified_by              String?
  modified_date            DateTime            @updatedAt
  name                     String
  status                   ProjectStatus       @default(PENDING)
  type                     ProjectType         @default(FACULTY_ASSIGNED)
  component_requests       ComponentRequest[]
  project_requests         ProjectRequest[]
  submissions              ProjectSubmission[]
  mentor                   String? // mentor email
  studentsRequired         Int                 @default(1)
  startDate                DateTime?
  endDate                  DateTime?
  department               String?

  @@map("projects")
}

model ProjectSubmission {
  id              String           @id @default(cuid())
  content         String
  attachments     String[]
  marks           Int?
  feedback        String?
  status          SubmissionStatus @default(SUBMITTED)
  project_id      String
  student_id      String
  submission_date DateTime         @default(now())
  project         Project          @relation(fields: [project_id], references: [id])
  student         Student          @relation(fields: [student_id], references: [id])

  @@unique([project_id, student_id])
  @@map("project_submissions")
}

model ProjectRequest {
  id            String               @id @default(cuid())
  project_id    String
  student_id    String
  faculty_id    String
  request_date  DateTime             @default(now())
  status        ProjectRequestStatus @default(PENDING)
  student_notes String?
  faculty_notes String?
  accepted_date DateTime?
  rejected_date DateTime?
  faculty       Faculty              @relation(fields: [faculty_id], references: [id])
  project       Project              @relation(fields: [project_id], references: [id])
  student       Student              @relation(fields: [student_id], references: [id])

  @@unique([project_id, student_id])
  @@map("project_requests")
}

model AttendanceRecord {
  id                 String              @id @default(cuid())
  section            String
  date               DateTime
  course_id          String
  created_at         DateTime            @default(now())
  faculty_id         String?
  faculty            Faculty?            @relation(fields: [faculty_id], references: [id])
  student_attendance StudentAttendance[]

  @@map("attendance_records")
}

model StudentAttendance {
  id                   String           @id @default(cuid())
  status               AttendanceStatus
  attendance_record_id String
  student_id           String
  attendance_record    AttendanceRecord @relation(fields: [attendance_record_id], references: [id])
  student              Student          @relation(fields: [student_id], references: [id])

  @@unique([attendance_record_id, student_id])
  @@map("student_attendance")
}

model Domain {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  coordinators  DomainCoordinator[]
  lab_components LabComponent[]
  library_items  LibraryItem[]

  @@map("domains")
}

model DomainCoordinator {
  id          String   @id @default(cuid())
  domain_id   String
  faculty_id  String
  assigned_at DateTime @default(now())
  assigned_by String
  domain      Domain   @relation(fields: [domain_id], references: [id], onDelete: Cascade)
  faculty     Faculty  @relation("DomainAssignments", fields: [faculty_id], references: [id], onDelete: Cascade)

  @@unique([domain_id, faculty_id])
  @@map("domain_coordinators")
}

model LabComponent {
  id                      String             @id @default(uuid())
  component_name          String
  component_description   String
  component_specification String?
  component_quantity      Int
  component_tag_id        String?
  component_category      String
  component_location      String
  image_path              String             @default("lab-images")
  front_image_id          String?
  back_image_id           String?
  invoice_number          String?
  purchase_value          Decimal?           @db.Decimal(10, 2)
  purchased_from          String?
  purchase_currency       String             @default("INR")
  purchase_date           DateTime?
  created_by              String
  modified_by             String?
  created_at              DateTime           @default(now())
  modified_at             DateTime           @updatedAt
  component_requests      ComponentRequest[]
  domain_id               String?
  domain                  Domain?            @relation(fields: [domain_id], references: [id])
  track_individual        Boolean            @default(false)
  individual_items        Json?              // Array of individual items with unique IDs

  @@map("lab_components")
}

model ComponentRequest {
  id            String        @id @default(cuid())
  student_id    String?       // Make optional so faculty can make requests
  faculty_id    String?       // Add faculty_id for faculty requests
  component_id  String
  quantity      Int
  request_date  DateTime      @default(now())
  return_date   DateTime?
  status        RequestStatus @default(PENDING)
  notes         String?
  approved_by   String?
  approved_date DateTime?
  project_id    String?
  purpose       String?
  required_date DateTime?
  faculty       Faculty?      @relation("ComponentApprovals", fields: [approved_by], references: [id])
  requesting_faculty Faculty? @relation("ComponentRequests", fields: [faculty_id], references: [id])
  component     LabComponent  @relation(fields: [component_id], references: [id])
  project       Project?      @relation(fields: [project_id], references: [id])
  student       Student?      @relation(fields: [student_id], references: [id]) // Make optional
  faculty_notes       String?
  collection_date     DateTime?
  due_date           DateTime?
  fine_amount        Decimal?           @db.Decimal(10, 2)
  fine_paid          Boolean            @default(false)
  payment_proof      String?

  @@map("component_requests")
}

model Location {
  id            String            @id @default(cuid())
  name          String
  capacity      Int
  description   String?
  is_available  Boolean           @default(true)
  building      String
  created_by    String
  created_date  DateTime          @default(now())
  floor         String
  images        String[]
  location_type LocationType
  modified_by   String?
  modified_date DateTime          @updatedAt
  room_number   String
  wing          String?
  bookings      LocationBooking[]

  @@map("locations")
}

model LocationBooking {
  id          String     @id @default(cuid())
  location_id String
  faculty_id  String?
  start_time  DateTime
  end_time    DateTime
  purpose     String
  title       String
  description String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  faculty     Faculty?   @relation(fields: [faculty_id], references: [id], onDelete: Cascade)
  location    Location   @relation(fields: [location_id], references: [id], onDelete: Cascade)

  @@map("location_bookings")
}

model LibraryItem {
  id                  String   @id @default(uuid())
  item_name           String
  item_description    String
  item_specification  String?
  item_quantity       Int
  item_tag_id         String?
  item_category       String
  item_location       String
  image_path          String   @default("library-images")
  front_image_id      String?
  back_image_id       String?
  invoice_number      String?
  purchase_value      Decimal? @db.Decimal(10, 2)
  purchased_from      String?
  purchase_currency   String   @default("INR")
  purchase_date       DateTime?
  created_by          String
  modified_by         String?
  created_at          DateTime @default(now())
  available_quantity        Int      @default(0)
  faculty_id           String?
  faculty              Faculty? @relation(fields: [faculty_id], references: [id])
  domain_id           String?
  domain              Domain?            @relation(fields: [domain_id], references: [id])

  modified_at         DateTime @updatedAt
  // Add relations to requests if needed later

  library_requests     LibraryRequest[]

  @@map("library_items")
}

<<<<<<< HEAD
model InternshipProject {
  id          String        @id @default(cuid())
  title       String
  description String
  duration    String
  skills      String[]
  faculty     User          @relation("FacultyProjects", fields: [facultyId], references: [id])
  facultyId   String
  isAccepted  Boolean       @default(false)
  applicants  Application[]
  slots       Int?
  startDate   DateTime
  endDate     DateTime

  @@index([facultyId])
}

model Application {
  id           String            @id @default(cuid())
  student      User              @relation("StudentApplications", fields: [studentId], references: [id])
  studentId    String
  internship   InternshipProject @relation(fields: [internshipId], references: [id])
  internshipId String
  resumeUrl    String
  status       ApplicationStatus @default(PENDING)
  createdAt    DateTime          @default(now())

  @@index([studentId])
  @@index([internshipId])
=======
model Opportunity {
  id                      String            @id @default(cuid())
  title                   String
  type                    OpportunityType
  description             String
  startDate               DateTime
  endDate                 DateTime
  applicationStartDate    DateTime
  applicationEndDate      DateTime
  remuneration            RemunerationType
  filePath                String?
  facultyId               String
  capacity                Int
  status                  OpportunityStatus @default(OPEN)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  applications            OpportunityApplication[]
  faculty                 Faculty           @relation(fields: [facultyId], references: [id])
}

model OpportunityApplication {
  id             String           @id @default(cuid())
  opportunityId  String
  studentId      String
  resumePath     String?
  status         ApplicationStatus @default(PENDING)
  appliedAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  opportunity    Opportunity      @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  student        Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  resumeData     Bytes?
  resumeName     String?
>>>>>>> d674cce1b9789c03f5104b82083ffe9037cce466
}

enum UserRole {
  ADMIN
  FACULTY
  MENTOR
  STUDENT
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ProjectStatus {
  PENDING
  ONGOING
  COMPLETED
  OVERDUE
  REJECTED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  REVISION_REQUESTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COLLECTED
  RETURNED
  USER_RETURNED
  OVERDUE
}

model LibraryRequest {
  id             String        @id @default(cuid())
  student_id     String?       // Make optional so faculty can make requests
  item_id        String
  quantity       Int
  purpose        String?
  request_date   DateTime      @default(now())
  required_date  DateTime?
  status         RequestStatus @default(PENDING)
  collection_date DateTime?
  return_date    DateTime?
  notes          String?
  faculty_notes  String?
  faculty_id     String?
  due_date           DateTime?
  fine_amount        Decimal?           @db.Decimal(10, 2)
  fine_paid          Boolean            @default(false)
  payment_proof      String?

  item    LibraryItem @relation(fields: [item_id], references: [id], onDelete: Cascade)
  student Student?    @relation(fields: [student_id], references: [id])  // Make optional
  faculty Faculty?    @relation(fields: [faculty_id], references: [id])

  @@map("library_requests")
}



enum LocationType {
  LAB
  CLASSROOM
  OFFICE
  WAREHOUSE
  OTHER
  CABIN
  LECTURE_HALL
  AUDITORIUM
  SEMINAR_HALL
}

enum ProjectType {
  FACULTY_ASSIGNED
  STUDENT_PROPOSED
}

enum ProjectRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

<<<<<<< HEAD
=======
enum OpportunityType {
  TA
  RA
  INTERN
}

enum RemunerationType {
  PAID
  UNPAID
}

enum OpportunityStatus {
  OPEN
  CLOSED
  COMPLETED
}

>>>>>>> d674cce1b9789c03f5104b82083ffe9037cce466
enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
<<<<<<< HEAD
=======

enum InsightStatus {
  PENDING        // Submitted by faculty, awaiting Platform Manager approval
  APPROVED       // Approved by Platform Manager, assigned to Developer
  IN_PROGRESS    // Developer is working on it
  DONE           // Developer marked as done, awaiting Platform Manager final approval
  REJECTED       // Rejected by Platform Manager
  COMPLETED      // Final approval by Platform Manager
}

model Insight {
  id            String        @id @default(cuid())
  title         String
  description   String
  status        InsightStatus @default(PENDING)
  created_by    String        // Faculty user id
  approved_by   String?       // Platform Manager user id
  approved_at   DateTime?
  completed_at  DateTime?
  rejection_reason String?    // Reason for rejection by Platform Manager
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model PlatformManagerAssignment {
  id          String   @id @default(cuid())
  faculty_id  String
  assigned_at DateTime @default(now())
  assigned_by String
  faculty     Faculty  @relation(fields: [faculty_id], references: [id], onDelete: Cascade)

  @@unique([faculty_id])
  @@map("platform_manager_assignments")
}

model DeveloperAssignment {
  id          String   @id @default(cuid())
  faculty_id  String
  assigned_at DateTime @default(now())
  assigned_by String
  faculty     Faculty  @relation(fields: [faculty_id], references: [id], onDelete: Cascade)

  @@unique([faculty_id])
  @@map("developer_assignments")
}
>>>>>>> d674cce1b9789c03f5104b82083ffe9037cce466
